# -*- coding: utf-8 -*-
"""Model

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FeziybnVFgywCHeslFIs2q_mk9mdmXxO
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
from sklearn.svm import SVR
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns


def convert_to_date(date_str):
    formats = ['%Y-%m-%d', '%m/%d/%Y', '%d-%m-%Y', '%Y/%m/%d', '%d/%m/%Y', '%m-%d-%Y']
    for fmt in formats:
        try:
            return pd.to_datetime(date_str, format=fmt)
        except ValueError:
            pass
    return pd.NaT

df = pd.read_excel('Amazon b2b.xlsx')

new_columns = ['Row ID', 'Order ID', 'Order Date', 'Date Key', 'Contact Name', 'Country', 'City', 'Region', 'Subregion', 'Customer', 'Customer ID', 'Industry', 'Segment', 'Product', 'License', 'Sales', 'Quantity', 'Discount', 'Profit']
df.columns = new_columns

df['Order Date'] = df['Order Date'].apply(convert_to_date)

df['Order Date'] = pd.to_datetime(df['Order Date'], errors='coerce')
for col in ['Sales', 'Quantity', 'Discount', 'Profit']:
    df[col] = pd.to_numeric(df[col], errors='coerce')
df['Date Key'] = pd.to_numeric(df['Date Key'], errors='coerce').astype('Int64')
df['Customer ID'] = pd.to_numeric(df['Customer ID'], errors='coerce').astype('Int64')


for col in ['Sales', 'Quantity', 'Discount', 'Profit']:
    df[col] = df[col].fillna(df[col].median())
for col in ['Contact Name', 'Country', 'City', 'Region', 'Subregion', 'Customer', 'Industry', 'Segment', 'Product', 'License']:
    df[col] = df[col].fillna('Missing')


df.dropna(subset=['Order Date'], inplace=True)


sales_95th = df['Sales'].quantile(0.95)
df['Sales'] = df['Sales'].clip(upper=sales_95th)


df.drop_duplicates(inplace=True)


df['TotalValue'] = df['Quantity'] * df['Sales']
df['DiscountRate'] = df['Discount'] / df['Sales']
df['Month'] = df['Order Date'].dt.month
df['DayOfWeek'] = df['Order Date'].dt.dayofweek

numerical_features = ['Quantity', 'Discount', 'Profit', 'TotalValue', 'DiscountRate']

scaler = StandardScaler()

df[numerical_features] = scaler.fit_transform(df[numerical_features])



X_baseline = df[['Quantity', 'Discount', 'Profit']]
X_enhanced = df[['Quantity', 'Discount', 'Profit', 'TotalValue', 'DiscountRate', 'Month', 'DayOfWeek']]
y = df['Sales']
X_train_baseline, X_test_baseline, y_train, y_test = train_test_split(X_baseline, y, test_size=0.2, random_state=42)
X_train_enhanced, X_test_enhanced, _, _ = train_test_split(X_enhanced, y, test_size=0.2, random_state=42)


baseline_model = LinearRegression()
baseline_model.fit(X_train_baseline, y_train)
baseline_pred = baseline_model.predict(X_test_baseline)


enhanced_model = RandomForestRegressor(random_state=42, n_estimators=100)
enhanced_model.fit(X_train_enhanced, y_train)
enhanced_pred = enhanced_model.predict(X_test_enhanced)


gb_model = GradientBoostingRegressor(random_state=42)
gb_model.fit(X_train_enhanced, y_train)
gb_pred = gb_model.predict(X_test_enhanced)


svr_model = SVR()
svr_model.fit(X_train_enhanced, y_train)
svr_pred = svr_model.predict(X_test_enhanced)


lr_mae = mean_absolute_error(y_test, baseline_pred)
lr_rmse = np.sqrt(mean_squared_error(y_test, baseline_pred))
lr_r2 = r2_score(y_test, baseline_pred)

rf_mae = mean_absolute_error(y_test, enhanced_pred)
rf_rmse = np.sqrt(mean_squared_error(y_test, enhanced_pred))
rf_r2 = r2_score(y_test, enhanced_pred)

gb_mae = mean_absolute_error(y_test, gb_pred)
gb_rmse = np.sqrt(mean_squared_error(y_test, gb_pred))
gb_r2 = r2_score(y_test, gb_pred)

svr_mae = mean_absolute_error(y_test, svr_pred)
svr_rmse = np.sqrt(mean_squared_error(y_test, svr_pred))
svr_r2 = r2_score(y_test, svr_pred)

print("Model Performance Comparison:")
print("-" * 30)
print(f"{'Metric':<15} {'Linear Regression':<20} {'Random Forest':<20} {'Gradient Boosting':<20} {'SVR':<20}")
print("-" * 30)
print(f"{'MAE':<15} {lr_mae:<20.4f} {rf_mae:<20.4f} {gb_mae:<20.4f} {svr_mae:<20.4f}")
print(f"{'RMSE':<15} {lr_rmse:<20.4f} {rf_rmse:<20.4f} {gb_rmse:<20.4f} {svr_rmse:<20.4f}")
print(f"{'R-squared':<15} {lr_r2:<20.4f} {rf_r2:<20.4f} {gb_r2:<20.4f} {svr_r2:<20.4f}")

results_df = pd.DataFrame({
    'Model': ['Linear Regression', 'Random Forest', 'Gradient Boosting', 'SVR'],
    'MAE': [lr_mae, rf_mae, gb_mae, svr_mae],
    'RMSE': [lr_rmse, rf_rmse, gb_rmse, svr_rmse],
    'R-squared': [lr_r2, rf_r2, gb_r2, svr_r2]
})

import pandas as pd

missing_values = df.isnull().sum()

num_duplicates = df.duplicated().sum()

sales_95th = df['Sales'].quantile(0.95)
num_outliers = df[df['Sales'] > sales_95th]['Sales'].count()

print("Missing Values:")
print(missing_values)
print("\nNumber of Duplicate Rows:", num_duplicates)
print("\nNumber of Outliers in Sales:", num_outliers)






df['Order Date'] = pd.to_datetime(df['Order Date'])
df.set_index('Order Date', inplace=True)
plt.figure(figsize=(12, 6))
df['Sales'].resample('M').sum().plot()
plt.title('Monthly Sales Trend')
plt.ylabel('Total Sales')
plt.show()

plt.figure(figsize=(10, 6))
sns.barplot(x='Segment', y='Sales', data=df)
plt.title('Sales by Customer Segment')
plt.xticks(rotation=45)
plt.show()

numerical_features = ['Sales', 'Quantity', 'Discount', 'Profit', 'TotalValue', 'DiscountRate']
correlation_matrix = df[numerical_features].corr()
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')
plt.title('Correlation Matrix of Numerical Features')
plt.show()


residuals = y_test - enhanced_pred
plt.figure(figsize=(8, 6))
plt.scatter(enhanced_pred, residuals, alpha=0.5)
plt.axhline(y=0, color='red', linestyle='--')
plt.xlabel('Predicted Sales')
plt.ylabel('Residuals')
plt.title('Residual Plot (Random Forest)')
plt.show()

plt.hist(df['Sales'])
plt.title('Distribution of Sales')
plt.xlabel('Sales')
plt.ylabel('Frequency')
plt.show()


plt.scatter(df['Quantity'], df['Sales'])
plt.title('Sales vs. Quantity')
plt.xlabel('Quantity')
plt.ylabel('Sales')
plt.show()